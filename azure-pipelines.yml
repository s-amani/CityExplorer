# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'


stages:
- stage: Test
  displayName: Test React
  jobs:
  - job: Test
    displayName: Test City Explorer App
    steps:
      - task: Npm@1
        inputs:
          command: 'install'
        displayName: NPM Install
      - task: UseNode@1
        inputs:
          version: '20.11.0'
          checkLatest: true
      - script: |
          node -v
          npm -v
        displayName: 'Print Node.js and npm versions'

      - script: npm install
        displayName: 'Install Dependencies'
        
      - script: npm install
        displayName: 'Install Dependencies'        
      
      - script: npm run build
        displayName: 'Run build'

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(Build.SourceDirectory)/build'
        inputs:
          SourceFolder: $(Build.SourceDirectory)
          Contents: web.config
          TargetFolder: $(Build.SourceDirectory)/build
          
      - task: Npm@1
        displayName: Run Tests
        inputs:
          command: 'custom'
          customCommand: 'run citest'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results junit.xml'
        inputs:
          testResultsFiles: junit.xml

      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage from $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
          reportDirectory: $(System.DefaultWorkingDirectory)/coverage

- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker Registry'
        repository: 'saberamani/city-explorer'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)


- stage: Provision
  displayName: 'Terraforming on Azure...'
  dependsOn: Build
  jobs:
    - job: Provision
      displayName: 'Provisioning Container Instance'
      pool: 
        vmImage: ubuntu-latest
      variables: 
      - group: terraform_env_vars
      steps:
      - script: |
          set -e

          terraform init -input=false
          terraform apply -input=false -auto-approve
        name: 'RunTerraform'
        displayName: 'Run Terraform'
        env:
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          TF_VAR_imagebuild: $(tag)